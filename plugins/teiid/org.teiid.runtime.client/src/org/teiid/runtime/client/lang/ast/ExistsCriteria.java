/* Generated By:JJTree: Do not edit this line. ExistsCriteria.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=true,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package org.teiid.runtime.client.lang.ast;

import org.teiid.runtime.client.lang.SubqueryHint;
import org.teiid.runtime.client.lang.parser.TeiidParser;

public class ExistsCriteria extends Criteria {

    private QueryCommand command;

    private boolean shouldEvaluate;

    private boolean negated;

    private SubqueryHint subqueryHint = new SubqueryHint();

    public ExistsCriteria(int id) {
        super(id);
    }

    public ExistsCriteria(TeiidParser p, int id) {
        super(p, id);
    }

    public QueryCommand getCommand() {
        return this.command;
    }

    public void setCommand(QueryCommand subqueryCommand){
        this.command = subqueryCommand;
    }

    public boolean shouldEvaluate() {
        return shouldEvaluate;
    }
    
    public void setShouldEvaluate(boolean shouldEvaluate) {
        this.shouldEvaluate = shouldEvaluate;
    }

    public boolean isNegated() {
        return negated;
    }
    
    public void setNegated(boolean negated) {
        this.negated = negated;
    }

    public SubqueryHint getSubqueryHint() {
        return subqueryHint;
    }
    
    public void setSubqueryHint(SubqueryHint subqueryHint) {
        this.subqueryHint = subqueryHint;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = super.hashCode();
        result = prime * result + ((this.command == null) ? 0 : this.command.hashCode());
        result = prime * result + (this.negated ? 1231 : 1237);
        result = prime * result + (this.shouldEvaluate ? 1231 : 1237);
        result = prime * result + ((this.subqueryHint == null) ? 0 : this.subqueryHint.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (!super.equals(obj)) return false;
        if (getClass() != obj.getClass()) return false;
        ExistsCriteria other = (ExistsCriteria)obj;
        if (this.command == null) {
            if (other.command != null) return false;
        } else if (!this.command.equals(other.command)) return false;
        if (this.negated != other.negated) return false;
        if (this.shouldEvaluate != other.shouldEvaluate) return false;
        if (this.subqueryHint == null) {
            if (other.subqueryHint != null) return false;
        } else if (!this.subqueryHint.equals(other.subqueryHint)) return false;
        return true;
    }

    /** Accept the visitor. **/
    public void jjtAccept(Teiid8ParserVisitor visitor, Object data) {
        visitor.visit(this, data);
    }
}
/* JavaCC - OriginalChecksum=5cc7f321c1d5e22ab073aa2d0115c232 (do not edit this line) */
