/* Generated By:JJTree: Do not edit this line. StoredProcedure.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=true,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package org.teiid.runtime.client.lang.ast;

import java.util.Collection;
import java.util.Map;
import java.util.TreeMap;
import org.teiid.runtime.client.Messages;
import org.teiid.runtime.client.lang.SPParameter;
import org.teiid.runtime.client.lang.parser.TeiidParser;

public class StoredProcedure extends Command {

    /** Used as parameters */
    private Map<Integer, SPParameter> mapOfParameters = new TreeMap<Integer, SPParameter>();

    /** Used to reference result set parameter if there is any */
    private Integer resultSetParameterKey;

    private boolean isCallableStatement;

    private boolean calledWithReturn;

    //whether parameters should be displayed in traditional indexed
    //manor, or as named parameters
    private boolean displayNamedParameters;

    private boolean isProcedureRelational;

    private String procedureName;

    public StoredProcedure(int id) {
        super(id);
    }

    public StoredProcedure(TeiidParser p, int id) {
        super(p, id);
    }

    /**
     * Get this stored procedure's name
     *
     * @return procedureName the stored procedure's name
     */
     public String getProcedureName(){
         return this.procedureName;
     }

    /**
    * Set this stored procedure's name
    *
    * @param procedureName the stored procedure's name
    */
    public void setProcedureName(String procedureName){
        this.procedureName = procedureName;
    }

    public boolean isCallableStatement() {
        return isCallableStatement;
    }

    public void setCallableStatement(boolean isCallableStatement) {
        this.isCallableStatement = isCallableStatement;
    }

    private SPParameter getResultSetParameter(){
        if (this.resultSetParameterKey != null){
            return mapOfParameters.get(resultSetParameterKey);
        }
        return null;
    }

    /**
     * @return a List of SPParameter objects for this stored procedure
     */
     public Collection<SPParameter> getParameters(){
         return mapOfParameters.values();
     }

    public SPParameter getParameter(int index){
        return mapOfParameters.get(index);
    }

    public int getParameterCount() {
        return mapOfParameters.size();
    }

    /**
    * Set a stored procedure's parameter
    *
    * @param index the index of the parameter to set
    * @param parameter <code>StoredProcedureParameter</code> the parameter
    * @throws IllegalArgumentExcecption if the parameters (index and parameter)
    *   are invalid.
    */
    public void setParameter(SPParameter parameter){
        if(parameter == null){
            throw new IllegalArgumentException(Messages.getString(Messages.ERR.ERR_015_010_0011));
        }

        Integer key = parameter.getIndex();
        if(parameter.getParameterType() == SPParameter.ParameterInfo.RESULT_SET.index()){
            resultSetParameterKey = key;
        }

        mapOfParameters.put(key, parameter);
    }

    public void setCalledWithReturn(boolean calledWithReturn) {
        this.calledWithReturn = calledWithReturn;
    }

    public boolean isCalledWithReturn() {
        return calledWithReturn;
    }

    /**
     * @return the displayNamedParameters
     */
    public boolean isDisplayNamedParameters() {
        return this.displayNamedParameters;
    }

    /**
     * @param displayNamedParameters the displayNamedParameters to set
     */
    public void setDisplayNamedParameters(boolean displayNamedParameters) {
        this.displayNamedParameters = displayNamedParameters;
    }

    /**
     * @return the isProcedureRelational
     */
    public boolean isProcedureRelational() {
        return this.isProcedureRelational;
    }

    /**
     * @param isProcedureRelational the isProcedureRelational to set
     */
    public void setProcedureRelational(boolean isProcedureRelational) {
        this.isProcedureRelational = isProcedureRelational;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = super.hashCode();
        result = prime * result + (this.calledWithReturn ? 1231 : 1237);
        result = prime * result + (this.displayNamedParameters ? 1231 : 1237);
        result = prime * result + (this.isCallableStatement ? 1231 : 1237);
        result = prime * result + (this.isProcedureRelational ? 1231 : 1237);
        result = prime * result + ((this.mapOfParameters == null) ? 0 : this.mapOfParameters.hashCode());
        result = prime * result + ((this.procedureName == null) ? 0 : this.procedureName.hashCode());
        result = prime * result + ((this.resultSetParameterKey == null) ? 0 : this.resultSetParameterKey.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (!super.equals(obj)) return false;
        if (getClass() != obj.getClass()) return false;
        StoredProcedure other = (StoredProcedure)obj;
        if (this.calledWithReturn != other.calledWithReturn) return false;
        if (this.displayNamedParameters != other.displayNamedParameters) return false;
        if (this.isCallableStatement != other.isCallableStatement) return false;
        if (this.isProcedureRelational != other.isProcedureRelational) return false;
        if (this.mapOfParameters == null) {
            if (other.mapOfParameters != null) return false;
        } else if (!this.mapOfParameters.equals(other.mapOfParameters)) return false;
        if (this.procedureName == null) {
            if (other.procedureName != null) return false;
        } else if (!this.procedureName.equals(other.procedureName)) return false;
        if (this.resultSetParameterKey == null) {
            if (other.resultSetParameterKey != null) return false;
        } else if (!this.resultSetParameterKey.equals(other.resultSetParameterKey)) return false;
        return true;
    }

    /** Accept the visitor. **/
    public void jjtAccept(Teiid8ParserVisitor visitor, Object data) {
        visitor.visit(this, data);
    }
}
/* JavaCC - OriginalChecksum=c312e9c5d62fcc77b0a38cf092591213 (do not edit this line) */
