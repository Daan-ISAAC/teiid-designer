/* Generated By:JJTree: Do not edit this line. AssignmentStatement.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=true,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package org.teiid.runtime.client.lang.ast;

import org.teiid.runtime.client.lang.parser.TeiidParser;

public class AssignmentStatement extends Statement {

    // the variable to which a value is assigned
    private ElementSymbol variable;
    private Expression value;
    private Command command;
    
    public AssignmentStatement(int id) {
        super(id);
    }

    public AssignmentStatement(TeiidParser p, int id) {
        super(p, id);
    }

    @Deprecated
    public Command getCommand() {
        if (command != null) {
            return command;
        }
        if (value instanceof ScalarSubquery && ((ScalarSubquery)value).getCommand() instanceof Query) {
            Query query = (Query)((ScalarSubquery)value).getCommand();
            if (query.getInto() != null) {
                return query;
            }
        }
        return null;
    }

    public void setCommand(Command command) {
        this.command = command;
    }

    /**
     * @see #getExpression()
     */
    @Deprecated
    public Expression getValue() {
        return value;
    }

    /**
     * @see #setExpression(Expression)
     */
    @Deprecated
    public void setValue(Expression value) {
        this.value = value;
    }

    public Expression getExpression() {
        return this.value;
    }

    public void setExpression(Expression expression) {
        this.value = expression;
    }

    /**
     * Get the expression giving the value that is assigned to the variable.
     * @return An <code>Expression</code> with the value
     */
    public ElementSymbol getVariable() {
        return this.variable;
    }
    
    /**
     * Set the variable that is assigned to the value
     * @param<code>ElementSymbol</code> that is being assigned
     */
    public void setVariable(ElementSymbol variable) {
        this.variable = variable;
    }   

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = super.hashCode();
        result = prime * result + ((this.command == null) ? 0 : this.command.hashCode());
        result = prime * result + ((this.value == null) ? 0 : this.value.hashCode());
        result = prime * result + ((this.variable == null) ? 0 : this.variable.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (!super.equals(obj)) return false;
        if (getClass() != obj.getClass()) return false;
        AssignmentStatement other = (AssignmentStatement)obj;
        if (this.command == null) {
            if (other.command != null) return false;
        } else if (!this.command.equals(other.command)) return false;
        if (this.value == null) {
            if (other.value != null) return false;
        } else if (!this.value.equals(other.value)) return false;
        if (this.variable == null) {
            if (other.variable != null) return false;
        } else if (!this.variable.equals(other.variable)) return false;
        return true;
    }

    /** Accept the visitor. **/
    public void jjtAccept(Teiid8ParserVisitor visitor, Object data) {
        visitor.visit(this, data);
    }
}
/* JavaCC - OriginalChecksum=9d8e32dbc35c1c90feaec305fa14473f (do not edit this line) */
