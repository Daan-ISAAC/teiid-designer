
ArgCheck.isNonNegativeInt=Expected argument to be non-negative but argument= {0}
ArgCheck.isNonPositiveInt=Expected argument to be non-positive but argument= {0}
ArgCheck.isNegativeInt=Expected argument to be negative but argument= {0}
ArgCheck.isPositiveInt=Expected argument to be positive but argument= {0}
ArgCheck.isStringNonZeroLength=Expected argument to have at least one character
ArgCheck.isNonNull=Expected argument to be non-null but got null
ArgCheck.isNull=Expected argument to be null but got non-null
ArgCheck.isInstanceOf=Expected argument to be an instance of {0}; was instance of {1}
ArgCheck.isCollectionNotEmpty=Expected collection to be non-empty
ArgCheck.isMapNotEmpty=Expected map to be non-empty
ArgCheck.isArrayNotEmpty=Expected array to be non-empty
ArgCheck.isNotSame={0} must not be the same as {1}.
ArgCheck.contains=Expected collection to contain value, but it did not
ArgCheck.containsKey=Expected map to contain key, but it did not

procedureServiceTextTableSqlTemplate = SELECT \n\t{0}\nFROM\n\t\
        (EXEC {1}.getTextFiles({2})) AS f, TEXTTABLE(file COLUMNS {3} {4}) AS {5}

procedureServiceTextInvokeHttpTableSqlTemplate = SELECT \n\t{0}\nFROM\n\t\
        (EXEC {1}.invokeHttp({2})) AS f, TEXTTABLE(TO_CHARS(f.result,''{3}'') COLUMNS {4} {5}) AS {6}
        
procedureServiceXmlGetTextFilesTableSqlTemplate=SELECT \n\t{0}\nFROM\n\t\
        (EXEC {1}.getTextFiles({2})) AS f, XMLTABLE({3} PASSING XMLPARSE(DOCUMENT f.file) COLUMNS {4}) AS {5}

procedureServiceXmlInvokeHttpTableSqlTemplate=SELECT \n\t{0}\nFROM\n\t\
        (EXEC {1}.invokeHttp({2})) AS f, XMLTABLE({3} PASSING XMLPARSE(DOCUMENT f.result) COLUMNS {4}) AS {5}