
ArgCheck.isNonNegativeInt=Expected argument to be non-negative but argument= {0}
ArgCheck.isNonPositiveInt=Expected argument to be non-positive but argument= {0}
ArgCheck.isNegativeInt=Expected argument to be negative but argument= {0}
ArgCheck.isPositiveInt=Expected argument to be positive but argument= {0}
ArgCheck.isStringNonZeroLength=Expected argument to have at least one character
ArgCheck.isNonNull=Expected argument to be non-null but got null
ArgCheck.isNull=Expected argument to be null but got non-null
ArgCheck.isInstanceOf=Expected argument to be an instance of {0}; was instance of {1}
ArgCheck.isCollectionNotEmpty=Expected collection to be non-empty
ArgCheck.isMapNotEmpty=Expected map to be non-empty
ArgCheck.isArrayNotEmpty=Expected array to be non-empty
ArgCheck.isNotSame={0} must not be the same as {1}.
ArgCheck.contains=Expected collection to contain value, but it did not
ArgCheck.containsKey=Expected map to contain key, but it did not

procedureServiceTextTableSqlTemplate = SELECT \n\t{0}\nFROM\n\t\
        (EXEC {1}.getTextFiles({2})) AS f, TEXTTABLE(file COLUMNS {3} {4}) AS {5}

procedureServiceTextInvokeHttpTableSqlTemplate = SELECT \n\t{0}\nFROM\n\t\
        (EXEC {1}.invokeHttp({2})) AS f, TEXTTABLE(TO_CHARS(f.result,''{3}'') COLUMNS {4} {5}) AS {6}
        
procedureServiceXmlGetTextFilesTableSqlTemplate=SELECT \n\t{0}\nFROM\n\t\
        (EXEC {1}.getTextFiles({2})) AS f, XMLTABLE({3} PASSING XMLPARSE(DOCUMENT f.file) COLUMNS {4}) AS {5}

procedureServiceXmlInvokeHttpTableSqlTemplate=SELECT \n\t{0}\nFROM\n\t\
        (EXEC {1}.invokeHttp({2})) AS f, XMLTABLE({3} PASSING XMLPARSE(DOCUMENT f.result) COLUMNS {4}) AS {5}

TeiidParser.Aggregate_only_top_level=Aggregate functions are only allowed HAVING/SELECT/ORDER BY clauses.  Window functions are only allowed in the SELECT/ORDER BY clauses: {0}.  Both require a FROM clause to be present.
TeiidParser.window_only_top_level=Window functions are not allowed in the HAVING clause: {0}
TeiidParser.Unknown_agg_func=Unknown aggregate function: {0}
TeiidParser.Invalid_func=Invalid function name: [{0}]
TeiidParser.Integer_parse=Unable to parse integer literal: {0}
TeiidParser.Float_parse=Unable to parse floating point literal: {0}
TeiidParser.decimal_parse=Unable to parse decimal literal: {0}
TeiidParser.Invalid_id=Invalid metadata ID format: [{0}]
TeiidParser.Invalid_alias=Invalid alias format: [{0}]
TeiidParser.Invalid_short_name=Invalid simple identifier format: [{0}]
TeiidParser.invalid_window=Cannot window a non-aggregate expression {0}.
TeiidParser.function_def=Function or foreign procedure {0} cannot define a body.
TeiidParser.view_def=Foreign table {0} cannot be defined by a query expression.
TeiidParser.pk_exists=Primary Key is already defined on {0}
TeiidParser.no_column=Column name {0} not found on table {1}
TeiidParser.function_return=Function {0} is not valid.  Functions can not support result set return parameters, and must have a scalar return parameter.
TeiidParser.function_in=Functions {0} is not valid.  Functions can only support 'In/RESULT' parameters.
TeiidParser.alter_table_doesnot_exist=The table {0} does not exist in the schema provided.
TeiidParser.alter_procedure_doesnot_exist=The procedure {0} does not exist in the schema provided.
TeiidParser.alter_procedure_param_doesnot_exist=The parameter {0} does not exist on procedure {1} in the schema provided.
TeiidParser.alter_function_param_doesnot_exist=The parameter {0} does not exist on function {1} in the schema provided.
TeiidParser.char_val=Invalid length for character