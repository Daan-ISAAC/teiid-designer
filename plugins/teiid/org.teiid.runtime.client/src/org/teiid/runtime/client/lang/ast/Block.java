/* Generated By:JJTree: Do not edit this line. Block.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=true,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package org.teiid.runtime.client.lang.ast;

import java.util.ArrayList;
import java.util.List;
import org.teiid.runtime.client.lang.parser.TeiidParser;

public class Block extends Statement implements Labeled {

    private List<Statement> statements = new ArrayList<Statement>();

    private boolean atomic;

    private String label;

    private String exceptionGroup;

    private List<Statement> exceptionStatements;

    public Block(int id) {
        super(id);
    }

    public Block(TeiidParser p, int id) {
        super(p, id);
    }

    /**
     * Add a <code>Statement</code> to this block.
     * @param statement The <code>Statement</code> to be added to the block
     */
    public void addStatement(Statement statement) {
        addStatement(statement, false);
    }
    
    public void addStatement(Statement statement, boolean exception) {
//        if (statement instanceof AssignmentStatement) {
//            AssignmentStatement stmt = (AssignmentStatement)statement;
//            Command cmd = stmt.getCommand();
//            if (cmd != null) {
//                internalAddStatement(new CommandStatement(cmd), exception);
//                stmt.setCommand(null);
//                stmt.setExpression(null);
//                if (stmt.getVariable().getShortName().equalsIgnoreCase(ProcedureReservedWords.ROWCOUNT) 
//                        && stmt.getVariable().getGroupSymbol() != null && stmt.getVariable().getGroupSymbol().getName().equalsIgnoreCase(ProcedureReservedWords.VARIABLES)) {
//                    return;
//                }
//                String fullName = ProcedureReservedWords.VARIABLES+Symbol.SEPARATOR+ProcedureReservedWords.ROWCOUNT;
//                stmt.setExpression(new ElementSymbol(fullName));
//            }
//        }
        internalAddStatement(statement, exception);
    }

    private void internalAddStatement(Statement statement, boolean exception) {
        if (exception) {
            if (this.exceptionStatements == null) {
                exceptionStatements = new ArrayList<Statement>();
            }
            exceptionStatements.add(statement);
        } else {
            statements.add(statement);
        }
    }
    /**
     * @return the atomic
     */
    public boolean isAtomic() {
        return atomic;
    }

    /**
     * @param atomic the atomic to set
     */
    public void setAtomic(boolean atomic) {
        this.atomic = atomic;
    }

    public String getLabel() {
        return label;
    }
    
    public void setLabel(String label) {
        this.label = label;
    }

    /**
     * @return the exceptionGroup
     */
    public String getExceptionGroup() {
        return exceptionGroup;
    }

    /**
     * @param exceptionGroup the exceptionGroup to set
     */
    public void setExceptionGroup(String exceptionGroup) {
        this.exceptionGroup = exceptionGroup;
    }

    /** Accept the visitor. **/
    public void jjtAccept(Teiid8ParserVisitor visitor, Object data) {
        visitor.visit(this, data);
    }
}
/* JavaCC - OriginalChecksum=c90f4508d390bd046d7adfa163192b9f (do not edit this line) */
