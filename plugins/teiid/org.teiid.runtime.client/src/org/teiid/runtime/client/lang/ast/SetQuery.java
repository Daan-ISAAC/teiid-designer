/* Generated By:JJTree: Do not edit this line. SetQuery.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=true,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=,NODE_EXTENDS=,NODE_FACTORY=TeiidNodeFactory,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package org.teiid.runtime.client.lang.ast;

import org.teiid.runtime.client.lang.parser.TeiidParser;

public class SetQuery extends QueryCommand {

    /**
     * Enumerator of types of operation
     */
    public enum Operation {
        /** Represents UNION of two queries */
        UNION,
        /** Represents intersection of two queries */
        INTERSECT,
        /** Represents set difference of two queries */
        EXCEPT
    }

    private boolean all = true;

    private Operation operation;                     

    private QueryCommand leftQuery;

    private QueryCommand rightQuery;

    public SetQuery(int id) {
        super(id);
    }

    public SetQuery(TeiidParser p, int id) {
        super(p, id);
    }
    
    /**
     * Set type of operation
     * @param operation Operation constant as defined in this class
     */
    public void setOperation(Operation operation) { 
        this.operation = operation;
    }
    
    /**
     * Get operation for this set
     * @return Operation as defined in this class
     */
    public Operation getOperation() { 
        return this.operation;
    }

    public boolean isAll() {
        return this.all;
    }

    public void setAll(boolean all) {
        this.all = all;
    }

    public QueryCommand getLeftQuery() {
        return this.leftQuery;
    }

    public void setLeftQuery(QueryCommand leftQuery) {
        this.leftQuery = leftQuery;
    }
    
    public QueryCommand getRightQuery() {
        return this.rightQuery;
    }
    
    public void setRightQuery(QueryCommand rightQuery) {
        this.rightQuery = rightQuery;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = super.hashCode();
        result = prime * result + (this.all ? 1231 : 1237);
        result = prime * result + ((this.leftQuery == null) ? 0 : this.leftQuery.hashCode());
        result = prime * result + ((this.operation == null) ? 0 : this.operation.hashCode());
        result = prime * result + ((this.rightQuery == null) ? 0 : this.rightQuery.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (!super.equals(obj)) return false;
        if (getClass() != obj.getClass()) return false;
        SetQuery other = (SetQuery)obj;
        if (this.all != other.all) return false;
        if (this.leftQuery == null) {
            if (other.leftQuery != null) return false;
        } else if (!this.leftQuery.equals(other.leftQuery)) return false;
        if (this.operation != other.operation) return false;
        if (this.rightQuery == null) {
            if (other.rightQuery != null) return false;
        } else if (!this.rightQuery.equals(other.rightQuery)) return false;
        return true;
    }

    /** Accept the visitor. **/
    public void jjtAccept(Teiid8ParserVisitor visitor, Object data) {
        visitor.visit(this, data);
    }
}
/* JavaCC - OriginalChecksum=15a0b6183a79ec40affab72ee83028a6 (do not edit this line) */
