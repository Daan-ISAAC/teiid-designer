/* Generated By:JJTree: Do not edit this line. SearchedCaseExpression.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=true,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package org.teiid.runtime.client.lang.ast;

import java.util.Collections;
import java.util.List;
import org.teiid.runtime.client.lang.parser.TeiidParser;

public class SearchedCaseExpression extends SimpleNode implements Expression {

    private Class<?> type;

    /**
     * Ordered List of Criteria in the WHEN parts of this expression.
     */
    private List when = null;

    /** Ordered List containing Expression objects. */
    private List then = null;

    /** The (optional) expression in the ELSE part of the expression */
    private Expression elseExpression = null;

    public SearchedCaseExpression(int id) {
        super(id);
    }

    public SearchedCaseExpression(TeiidParser p, int id) {
        super(p, id);
    }

    @Override
    public Class getType() {
        return type;
    }

    /**
    *
    * @see org.teiid.query.sql.symbol.AbstractCaseExpression#getWhenCount()
    */
   public int getWhenCount() {
       return (when == null) ? 0 : when.size();
   }

   /**
    * Gets the List of Criteria in the WHEN parts of this expression. Never null.
    * @return
    */
   public List getWhen() {
       return when;
   }

   /**
    * Gets the WHEN criteria at the given 0-based index.
    * @param index
    * @return
    */
   public Criteria getWhenCriteria(int index) {
       return (Criteria)when.get(index);
   }

   /**
    * Sets the WHEN and THEN parts of this CASE expression.
    * Both lists should have the same number of items.
    * @param when a non-null List of at least one Criteria
    * @param then a non-null List of at least one Expression
    */
   public void setWhen(List when, List then) {
       if (when == null || then == null) {
           throw new IllegalArgumentException();
       }
       if (when.size() != then.size() ||
           when.size() < 1) {
           throw new IllegalArgumentException();
       }
       for (int i = 0 ; i < when.size(); i++) {
           if (!(when.get(i) instanceof Criteria)) {
               throw new IllegalArgumentException();
           }
           if (!(then.get(i) instanceof Expression)) {
               throw new IllegalArgumentException();
           }
       }
       if (this.when != when) {
           this.when = Collections.unmodifiableList(when);
       }
       setThen(then);
   }

   /**
    * @return Gets the expression in the ELSE part of this expression. May be null as
    * the ELSE is optional.
    */
   public Expression getElseExpression() {
       return elseExpression;
   }
   
   /**
    * Sets the expression in the ELSE part of this expression. Can be null.
    * @param elseExpression
    */
   public void setElseExpression(Expression elseExpression) {
       this.elseExpression = elseExpression;
   }

   /**
    * @return Gets the List of THEN expressions in this CASE expression. Never null.
    */
   public List getThen() {
       return then;
   }
   
   /**
    * Sets the List of THEN expressions in this CASE expression
    * @param then
    */
   public void setThen(List then) {
       if (this .then != then) {
           this.then = Collections.unmodifiableList(then);
       }
   }

    /**
     * Sets the type to which this expression has resolved.
     * @param type
     */
    public void setType(Class type) {
        this.type = type;
    }

    /** Accept the visitor. **/
    public void jjtAccept(Teiid8ParserVisitor visitor, Object data) {
        visitor.visit(this, data);
    }
}
/* JavaCC - OriginalChecksum=04edede68784e204c845cc05bef87d10 (do not edit this line) */
