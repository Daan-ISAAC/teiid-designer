/* Generated By:JJTree: Do not edit this line. FromClause.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=true,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package org.teiid.runtime.client.lang.ast;

import org.teiid.designer.annotation.Since;
import org.teiid.runtime.client.lang.parser.AbstractTeiidParserVisitor;
import org.teiid.runtime.client.lang.parser.TeiidParser;

public class FromClause extends SimpleNode {

    public static final String MAKEIND = "MAKEIND"; //$NON-NLS-1$

    @Since("8.0.0")
    public static final String PRESERVE = "PRESERVE"; //$NON-NLS-1$

    private boolean optional;

    private boolean makeDep;

    private boolean makeNotDep;

    private boolean makeInd;

    private boolean noUnnest;

    private boolean preserve;

    public FromClause(int id) {
        super(id);
    }

    public FromClause(TeiidParser p, int id) {
        super(p, id);
    }

    public boolean hasHint() {
        return optional || makeDep || makeNotDep || makeInd || noUnnest || preserve;
    }

    public boolean isOptional() {
        return optional;
    }
    
    public void setOptional(boolean optional) {
        this.optional = optional;
    }
    
    public boolean isMakeInd() {
        return makeInd;
    }
    
    public void setMakeInd(boolean makeInd) {
        this.makeInd = makeInd;
    }

    public void setNoUnnest(boolean noUnnest) {
        this.noUnnest = noUnnest;
    }
    
    public boolean isNoUnnest() {
        return noUnnest;
    }

    public boolean isMakeDep() {
        return this.makeDep;
    }

    public void setMakeDep(boolean makeDep) {
        this.makeDep = makeDep;
    }

    public boolean isMakeNotDep() {
        return this.makeNotDep;
    }

    public void setMakeNotDep(boolean makeNotDep) {
        this.makeNotDep = makeNotDep;
    }
    
    public boolean isPreserve() {
        return preserve;
    }
    
    public void setPreserve(boolean preserve) {
        this.preserve = preserve;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = super.hashCode();
        result = prime * result + (this.makeDep ? 1231 : 1237);
        result = prime * result + (this.makeInd ? 1231 : 1237);
        result = prime * result + (this.makeNotDep ? 1231 : 1237);
        result = prime * result + (this.noUnnest ? 1231 : 1237);
        result = prime * result + (this.optional ? 1231 : 1237);
        result = prime * result + (this.preserve ? 1231 : 1237);
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (!super.equals(obj)) return false;
        if (getClass() != obj.getClass()) return false;
        FromClause other = (FromClause)obj;
        if (this.makeDep != other.makeDep) return false;
        if (this.makeInd != other.makeInd) return false;
        if (this.makeNotDep != other.makeNotDep) return false;
        if (this.noUnnest != other.noUnnest) return false;
        if (this.optional != other.optional) return false;
        if (this.preserve != other.preserve) return false;
        return true;
    }

    /** Accept the visitor. **/
    @Override
    public void accept(AbstractTeiidParserVisitor visitor, Object data) {
        visitor.visit(this, data);
    }

    @Override
    public FromClause clone() {
        FromClause clone = new FromClause(this.parser, this.id);

        clone.setOptional(isOptional());
        clone.setMakeInd(isMakeInd());
        clone.setNoUnnest(isNoUnnest());
        clone.setMakeDep(isMakeDep());
        clone.setMakeNotDep(isMakeNotDep());
        clone.setPreserve(isPreserve());

        return clone;
    }

}
/* JavaCC - OriginalChecksum=908130697ce6a37a6c778dfefda987bb (do not edit this line) */
