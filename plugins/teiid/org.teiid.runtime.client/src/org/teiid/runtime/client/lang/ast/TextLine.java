/* Generated By:JJTree: Do not edit this line. TextLine.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=true,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=,NODE_EXTENDS=,NODE_FACTORY=TeiidNodeFactory,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package org.teiid.runtime.client.lang.ast;

import java.util.List;
import org.teiid.runtime.client.lang.parser.TeiidParser;

public class TextLine extends SimpleNode implements Expression {

    private Character delimiter;

    private Character quote;

    private boolean includeHeader;

    private List<DerivedColumn> expressions;

    private String encoding;

    public TextLine(int id) {
        super(id);
    }

    public TextLine(TeiidParser p, int id) {
        super(p, id);
    }

    public Character getDelimiter() {
        return delimiter;
    }

    public void setDelimiter(Character delimiter) {
        this.delimiter = delimiter;
    }

    public String getEncoding() {
        return encoding;
    }

    public void setEncoding(String encoding) {
        this.encoding = encoding;
    }

    public Character getQuote() {
        return quote;
    }

    public void setQuote(Character quote) {
        this.quote = quote;
    }

    public boolean isIncludeHeader() {
        return includeHeader;
    }

    public void setIncludeHeader(boolean includeHeader) {
        this.includeHeader = includeHeader;
    }

    public List<DerivedColumn> getExpressions() {
        return expressions;
    }

    public void setExpressions(List<DerivedColumn> expressions) {
        this.expressions = expressions;
    }

    @Override
    public Class<?> getType() {
        return String[].class;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = super.hashCode();
        result = prime * result + ((this.delimiter == null) ? 0 : this.delimiter.hashCode());
        result = prime * result + ((this.encoding == null) ? 0 : this.encoding.hashCode());
        result = prime * result + ((this.expressions == null) ? 0 : this.expressions.hashCode());
        result = prime * result + (this.includeHeader ? 1231 : 1237);
        result = prime * result + ((this.quote == null) ? 0 : this.quote.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (!super.equals(obj)) return false;
        if (getClass() != obj.getClass()) return false;
        TextLine other = (TextLine)obj;
        if (this.delimiter == null) {
            if (other.delimiter != null) return false;
        } else if (!this.delimiter.equals(other.delimiter)) return false;
        if (this.encoding == null) {
            if (other.encoding != null) return false;
        } else if (!this.encoding.equals(other.encoding)) return false;
        if (this.expressions == null) {
            if (other.expressions != null) return false;
        } else if (!this.expressions.equals(other.expressions)) return false;
        if (this.includeHeader != other.includeHeader) return false;
        if (this.quote == null) {
            if (other.quote != null) return false;
        } else if (!this.quote.equals(other.quote)) return false;
        return true;
    }

    /** Accept the visitor. **/
    public void jjtAccept(Teiid8ParserVisitor visitor, Object data) {
        visitor.visit(this, data);
    }
}
/* JavaCC - OriginalChecksum=e0b8f44a78e8c88a57ec4d4e5bf9c25f (do not edit this line) */
