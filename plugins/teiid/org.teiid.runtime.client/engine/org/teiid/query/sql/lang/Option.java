/* Generated By:JJTree: Do not edit this line. Option.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=true,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package org.teiid.query.sql.lang;

import java.util.ArrayList;
import java.util.List;
import org.teiid.designer.query.sql.lang.IOption;
import org.teiid.language.SQLConstants.Reserved;
import org.teiid.query.parser.LanguageVisitor;
import org.teiid.query.parser.TeiidParser;

/**
 *
 */
public class Option extends SimpleNode implements IOption<LanguageVisitor> {

    /**
     * Make Dep token
     */
    public final static String MAKEDEP = Reserved.MAKEDEP; 

    /**
     * Make Not Dep token
     */
    public final static String MAKENOTDEP = Reserved.MAKENOTDEP;

    /**
     * Optional token
     */
    public final static String OPTIONAL = "optional"; //$NON-NLS-1$

    private List<String> makeDependentGroups;

    private List<String> makeNotDependentGroups;

    private List<String> noCacheGroups;

    private boolean noCache;

    /**
     * @param p
     * @param id
     */
    public Option(TeiidParser p, int id) {
        super(p, id);
    }

    /**
     * Add group to make dependent
     * @param group Group to make dependent
     */
    public void addDependentGroup(String group) {
        if(this.makeDependentGroups == null) {
            this.makeDependentGroups = new ArrayList<String>();
        }
        this.makeDependentGroups.add(group);    
    }
    
    /** 
     * Get all groups to make dependent
     * @return List of String defining groups to be made dependent, may be null if no groups
     */
    @Override
    public List<String> getDependentGroups() {
        return this.makeDependentGroups;
    }
    
    /**
     * Add group to make dependent
     * @param group Group to make dependent
     */
    public void addNotDependentGroup(String group) {
        if(this.makeNotDependentGroups == null) {
            this.makeNotDependentGroups = new ArrayList<String>();
        }
        this.makeNotDependentGroups.add(group);    
    }
    
    /** 
     * Get all groups to make dependent
     * @return List of String defining groups to be made dependent, may be null if no groups
     */
    @Override
    public List<String> getNotDependentGroups() {
        return this.makeNotDependentGroups;
    }
    
    /**
     * Add group that overrides the default behavior of Materialized View feautre
     * to route the query to the primary virtual group transformation instead of 
     * the Materialized View transformation.
     * @param group Group that overrides the default behavior of Materialized View
     */
    public void addNoCacheGroup(String group) {
        if(this.noCacheGroups == null) {
            this.noCacheGroups = new ArrayList<String>();
        }
        this.noCacheGroups.add(group);    
    }
    
    /** 
     * Get all groups that override the default behavior of Materialized View feautre
     * to route the query to the primary virtual group transformation instead of 
     * the Materialized View transformation.
     * @return List of String defining groups that overrides the default behavior of 
     * Materialized View, may be null if there are no groups
     */
    @Override
    public List<String> getNoCacheGroups() {
        return this.noCacheGroups;
    }
    
    @Override
    public boolean isNoCache() {
        return noCache;
    }

    /**
     * @param noCache
     */
    public void setNoCache(boolean noCache) {
        this.noCache = noCache;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = super.hashCode();
        result = prime * result + ((this.makeDependentGroups == null) ? 0 : this.makeDependentGroups.hashCode());
        result = prime * result + ((this.makeNotDependentGroups == null) ? 0 : this.makeNotDependentGroups.hashCode());
        result = prime * result + (this.noCache ? 1231 : 1237);
        result = prime * result + ((this.noCacheGroups == null) ? 0 : this.noCacheGroups.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (!super.equals(obj)) return false;
        if (getClass() != obj.getClass()) return false;
        Option other = (Option)obj;
        if (this.makeDependentGroups == null) {
            if (other.makeDependentGroups != null) return false;
        } else if (!this.makeDependentGroups.equals(other.makeDependentGroups)) return false;
        if (this.makeNotDependentGroups == null) {
            if (other.makeNotDependentGroups != null) return false;
        } else if (!this.makeNotDependentGroups.equals(other.makeNotDependentGroups)) return false;
        if (this.noCache != other.noCache) return false;
        if (this.noCacheGroups == null) {
            if (other.noCacheGroups != null) return false;
        } else if (!this.noCacheGroups.equals(other.noCacheGroups)) return false;
        return true;
    }

    /** Accept the visitor. **/
    @Override
    public void acceptVisitor(LanguageVisitor visitor) {
        visitor.visit(this);
    }

    @Override
    public Option clone() {
        Option clone = new Option(this.parser, this.id);

        clone.setNoCache(isNoCache());

        return clone;
    }

}
/* JavaCC - OriginalChecksum=a564d0b56868fc308d004c702396106a (do not edit this line) */
