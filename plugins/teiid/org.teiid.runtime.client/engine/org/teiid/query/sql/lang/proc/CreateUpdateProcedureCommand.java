/* Generated By:JJTree: Do not edit this line. CreateUpdateProcedureCommand.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=true,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=,NODE_EXTENDS=,NODE_FACTORY=TeiidNodeFactory,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package org.teiid.query.sql.lang.proc;

import java.util.Collections;
import java.util.List;
import org.teiid.designer.annotation.Removed;
import org.teiid.designer.query.sql.proc.ICreateProcedureCommand;
import org.teiid.query.parser.LanguageVisitor;
import org.teiid.query.parser.TeiidParser;
import org.teiid.query.sql.lang.Command;
import org.teiid.query.sql.lang.StoredProcedure;
import org.teiid.query.sql.lang.symbol.Expression;

/**
 *
 */
@Removed("8.0.0")
public class CreateUpdateProcedureCommand extends Command
    implements ICreateProcedureCommand<Block, Expression, LanguageVisitor> {

    // top level block for the procedure
    private Block block;

    //whether it is update procedure or virtual stored procedure, default to update procedure
    private boolean isUpdateProcedure = true;

    private List<? extends Expression> projectedSymbols;

    //command that returns resultset. For virtual procedure only.
    private Command resultsCommand;

    /**
     * @param p
     * @param id
     */
    public CreateUpdateProcedureCommand(TeiidParser p, int id) {
        super(p, id);
    }

    /**
     * Return type of command to make it easier to build switch statements by command type.
     * @return The type of this command
     */
    @Override
    public int getType() {
        return TYPE_UPDATE_PROCEDURE;   
    }

    /**
     * @return the block
     */
    @Override
    public Block getBlock() {
        return block;
    }

    /**
     * @param block the block to set
     */
    @Override
    public void setBlock(Block block) {
        this.block = block;
    }

    /**
     * @return the isUpdateProcedure
     */
    public boolean isUpdateProcedure() {
        return this.isUpdateProcedure;
    }

    /**
     * @param isUpdateProcedure the isUpdateProcedure to set
     */
    public void setUpdateProcedure(boolean isUpdateProcedure) {
        this.isUpdateProcedure = isUpdateProcedure;
    }

    /**
     * Get the ordered list of all elements returned by this query.  These elements
     * may be ElementSymbols or ExpressionSymbols but in all cases each represents a 
     * single column.
     * @return Ordered list of SingleElementSymbol
     */
    @Override
    public List getProjectedSymbols(){
        if(this.projectedSymbols != null){
            return this.projectedSymbols;
        }
        if(!isUpdateProcedure){
            if(this.resultsCommand == null){
                //user may have not entered any query yet
                return Collections.EMPTY_LIST;
            }
            List<? extends Expression> symbols = this.resultsCommand.getProjectedSymbols();
            if (this.resultsCommand instanceof StoredProcedure) {
                StoredProcedure sp = (StoredProcedure)this.resultsCommand;
                if (sp.isCallableStatement()) {
                    symbols = sp.getResultSetColumns();
                }
            }
            setProjectedSymbols((List<Expression>) symbols);
            return this.projectedSymbols;
        }
        this.projectedSymbols = getUpdateCommandSymbol();
        return this.projectedSymbols;        
    }

    /**
     * @param projSymbols
     */
    @Override
    public void setProjectedSymbols(List<Expression> projSymbols) {
        projectedSymbols = projSymbols;
    }

    /**
     * @return Command
     */
    public Command getResultsCommand() {
        return resultsCommand;
    }

    /**
     * @param command
     */
    public void setResultsCommand(Command command) {
        resultsCommand = command;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = super.hashCode();
        result = prime * result + (this.isUpdateProcedure ? 1231 : 1237);
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (!super.equals(obj)) return false;
        if (getClass() != obj.getClass()) return false;
        CreateUpdateProcedureCommand other = (CreateUpdateProcedureCommand)obj;
        if (this.isUpdateProcedure != other.isUpdateProcedure) return false;
        return true;
    }

    /** Accept the visitor. **/
    @Override
    public void acceptVisitor(LanguageVisitor visitor) {
        visitor.visit(this);
    }

    @Override
    public CreateUpdateProcedureCommand clone() {
        CreateUpdateProcedureCommand clone = new CreateUpdateProcedureCommand(this.parser, this.id);

        clone.setUpdateProcedure(isUpdateProcedure());
        if(getBlock() != null)
            clone.setBlock(getBlock().clone());
        if(getSourceHint() != null)
            clone.setSourceHint(getSourceHint());
        if(getOption() != null)
            clone.setOption(getOption().clone());

        return clone;
    }

}
/* JavaCC - OriginalChecksum=f346ab2e5ff020b1b349d6d7fdcc5974 (do not edit this line) */
