/* Generated By:JJTree: Do not edit this line. GroupSymbol.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=true,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package org.teiid.query.sql.lang.symbol;

import org.teiid.designer.query.sql.symbol.IGroupSymbol;
import org.teiid.query.parser.LanguageVisitor;
import org.teiid.query.parser.TeiidParser;

/**
 *
 */
public class GroupSymbol extends Symbol implements IGroupSymbol<LanguageVisitor> {

    /** Definition of the symbol, may be null */
    private String definition;

    private String outputDefinition;

    /** Actual metadata ID */
    private Object metadataID;

    /**
     * @param p
     * @param id
     */
    public GroupSymbol(TeiidParser p, int id) {
        super(p, id);
    }

    /**
     * Get the definition for the group symbol, which may be null
     * @return Group definition, may be null
     */
    @Override
    public String getDefinition() {
        return definition;
    }

    /**
     * Set the definition for the group symbol, which may be null
     * @param definition Definition
     */
    @Override
    public void setDefinition(String definition) {
        this.definition = definition;
        this.outputDefinition = definition;
    }

    /**
     * @return output definition
     */
    public String getOutputDefinition() {
        return this.outputDefinition;
    }

    /**
     * @param outputDefinition
     */
    public void setOutputDefinition(String outputDefinition) {
        this.outputDefinition = outputDefinition;
    }

    @Override
    public boolean isProcedure() {
        return false;
    }

    /**
     * Get the metadata ID that this group symbol resolves to.  If
     * the group symbol has not been resolved yet, this will be null.
     * If the symbol has been resolved, this will never be null.
     * @return Metadata ID object
     */
    @Override
    public Object getMetadataID() {
        return metadataID;
    }

    @Override
    public void setMetadataID(Object metadataID) {
        this.metadataID = metadataID;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = super.hashCode();
        result = prime * result + ((this.definition == null) ? 0 : this.definition.hashCode());
        result = prime * result + ((this.outputDefinition == null) ? 0 : this.outputDefinition.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (!super.equals(obj)) return false;
        if (getClass() != obj.getClass()) return false;
        GroupSymbol other = (GroupSymbol)obj;
        if (this.definition == null) {
            if (other.definition != null) return false;
        } else if (!this.definition.equals(other.definition)) return false;
        if (this.outputDefinition == null) {
            if (other.outputDefinition != null) return false;
        } else if (!this.outputDefinition.equals(other.outputDefinition)) return false;
        return true;
    }

    /** Accept the visitor. **/
    @Override
    public void acceptVisitor(LanguageVisitor visitor) {
        visitor.visit(this);
    }

    @Override
    public GroupSymbol clone() {
        GroupSymbol clone = new GroupSymbol(this.parser, this.id);

        if(getDefinition() != null)
            clone.setDefinition(getDefinition());
        if(getOutputDefinition() != null)
            clone.setOutputDefinition(getOutputDefinition());
        if(getCanonicalShortName() != null)
            clone.setCanonicalShortName(getCanonicalShortName());
        if(getOutputName() != null)
            clone.setOutputName(getOutputName());
        if(getShortName() != null)
            clone.setShortName(getShortName());
        if(getName() != null)
            clone.setName(getName());

        return clone;
    }

}
/* JavaCC - OriginalChecksum=f7012acf7f9a059597f0384f4fcb74fa (do not edit this line) */
